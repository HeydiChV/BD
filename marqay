--ESTUDIANTE: Heydi Chaina Velasquez
-- Crear la base de datos
CREATE DATABASE MARQAY;
-- Usar la base de datos
USE MARQAY;

--ESTUDIANTE: Heydi Chaina Velasquez
-- Crear tabla para usuarios registrados
CREATE TABLE Usuarios (
    UsuarioID INT PRIMARY KEY IDENTITY(1,1),
    Nombre NVARCHAR(50),
    Apellido NVARCHAR(50),
    CorreoElectronico NVARCHAR(100),
    Contraseña NVARCHAR(50),
    CONSTRAINT UQ_CorreoElectronico UNIQUE (CorreoElectronico)
);

--ESTUDIANTE: Heydi Chaina Velasquez
-- Inserción de datos en la tabla de usuarios
INSERT INTO Usuarios (Nombre, Apellido, CorreoElectronico, Contraseña)
VALUES
    ('Juan', 'Perez', 'juan.perez@email.com', 'password123'),
    ('María', 'Gomez', 'maria.gomez@email.com', 'securepass'),
    ('Carlos', 'Lopez', 'carlos.lopez@email.com', 'pass1234'),
    ('Laura', 'Martinez', 'laura.martinez@email.com', 'securepassword'),
    ('Alejandro', 'Rodriguez', 'alejandro.rodriguez@email.com', '123456'),
    ('Carmen', 'Santos', 'carmen.santos@email.com', 'pass321'),
    ('Roberto', 'Fernandez', 'roberto.fernandez@email.com', 'securepass432'),
    ('Isabel', 'Gutierrez', 'isabel.gutierrez@email.com', 'password567'),
    ('Miguel', 'Diaz', 'miguel.diaz@email.com', 'securepass789'),
    ('Ana', 'Ramirez', 'ana.ramirez@email.com', 'pass987'),
    ('Pedro', 'Hernandez', 'pedro.hernandez@email.com', 'securepass654'),
    ('Sofia', 'Gonzalez', 'sofia.gonzalez@email.com', 'pass789'),
    ('Javier', 'Torres', 'javier.torres@email.com', 'securepass876'),
    ('Luisa', 'Vargas', 'luisa.vargas@email.com', 'password876'),
    ('Daniel', 'Cruz', 'daniel.cruz@email.com', 'securepass234'),
    ('Monica', 'Luna', 'monica.luna@email.com', 'pass234'),
    ('Eduardo', 'Ortega', 'eduardo.ortega@email.com', 'securepass987'),
    ('Rosa', 'Peralta', 'rosa.peralta@email.com', 'password345'),
    ('Fernando', 'Mendoza', 'fernando.mendoza@email.com', 'securepass567');

--ESTUDIANTE: Heydi Chaina Velasquez
-- Crear tabla para planes de servicio
CREATE TABLE PlanesServicio (
    PlanID INT PRIMARY KEY IDENTITY(1,1),
    Descripcion NVARCHAR(100),
    PrecioMensual DECIMAL(10, 2)
);

--ESTUDIANTE: Heydi Chaina Velasquez
-- Inserción de datos en la tabla de planes de servicio
INSERT INTO PlanesServicio (Descripcion, PrecioMensual)
VALUES 
    ('Inversión por un mes del servicio', 600.00),
    ('Inversión por tres meses del servicio', 550.00),
    ('Inversión por seis meses del servicio', 500.00);

--ESTUDIANTE: Heydi Chaina Velasquez
-- Crear tabla para detalles de suscripción
CREATE TABLE DetallesSuscripcion (
    DetalleID INT PRIMARY KEY IDENTITY(1,1),
    UsuarioID INT FOREIGN KEY REFERENCES Usuarios(UsuarioID),
    PlanID INT FOREIGN KEY REFERENCES PlanesServicio(PlanID),
    FechaInicio DATE,
    FechaFin DATE,
    CONSTRAINT CK_FechaFin CHECK (FechaFin > FechaInicio)
);

--ESTUDIANTE: Heydi Chaina Velasquez
-- Inserción de detalles de suscripción
INSERT INTO DetallesSuscripcion (UsuarioID, PlanID, FechaInicio, FechaFin)
VALUES 
    (1, 1, '2023-01-01', '2023-01-31'),
    (2, 1, '2023-02-01', '2023-02-28'),
    (3, 1, '2023-03-01', '2023-03-31'),
    (4, 2, '2023-04-01', '2023-05-31'),
    (5, 2, '2023-05-01', '2023-06-30'),
    (6, 1, '2023-06-01', '2023-06-30'),
    (7, 1, '2023-07-01', '2023-07-31'),
    (8, 1, '2023-08-01', '2023-08-31'),
    (9, 1, '2023-09-01', '2023-09-30'),
    (10, 1, '2023-10-01', '2023-10-31');

--ESTUDIANTE: Heydi Chaina Velasquez
-- Crear procedimiento almacenado para registrar usuarios
CREATE PROCEDURE RegistrarUsuario
    @Nombre NVARCHAR(50),
    @Apellido NVARCHAR(50),
    @CorreoElectronico NVARCHAR(100),
    @Contraseña NVARCHAR(50)
AS
BEGIN
    INSERT INTO Usuarios (Nombre, Apellido, CorreoElectronico, Contraseña)
    VALUES (@Nombre, @Apellido, @CorreoElectronico, @Contraseña);
END;
-- Ejecutar el procedimiento almacenado para registrar usuarios
EXEC RegistrarUsuario 
    @Nombre = 'Heydi Chaina', 
    @Apellido = 'Velasquez', 
    @CorreoElectronico = 'heydi.velasquez@email.com', 
    @Contraseña = 'passwordHeydi';
PRINT 'Usuario registrado correctamente.';


--ESTUDIANTE: Heydi Chaina Velasquez
-- Crear función para calcular el costo total de una suscripción
CREATE FUNCTION CalcularCostoSuscripcion
    (@PlanID INT, @Meses INT)
RETURNS DECIMAL(10, 2)
AS
BEGIN
    DECLARE @PrecioMensual DECIMAL(10, 2);

    SELECT @PrecioMensual = PrecioMensual
    FROM PlanesServicio
    WHERE PlanID = @PlanID;

    RETURN @PrecioMensual * @Meses;
END;
-- Ejecutar la función para calcular el costo total de una suscripción
DECLARE @PlanID INT = 1; 
DECLARE @Meses INT = 3; 
DECLARE @CostoTotal DECIMAL(10, 2);
SET @CostoTotal = dbo.CalcularCostoSuscripcion(@PlanID, @Meses);
PRINT 'El costo total de la suscripción es: ' + CAST(@CostoTotal AS NVARCHAR(20));

--ESTUDIANTE: Heydi Chaina Velasquez
-- Crear login y usuario para acceso a la base de datos
CREATE LOGIN MarqayLogin WITH PASSWORD = 'marqay';
CREATE USER MarqayUser FOR LOGIN MarqayLogin;

--ESTUDIANTE: Heydi Chaina Velasquez
-- Asignar permisos al usuario
GRANT SELECT, INSERT, UPDATE, DELETE ON SCHEMA::dbo TO MarqayUser;

--ESTUDIANTE: Heydi Chaina Velasquez
-- Procedimiento almacenado para actualizar datos de usuario
CREATE PROCEDURE ActualizarUsuario
    @UsuarioID INT,
    @NuevoNombre NVARCHAR(50),
    @NuevoApellido NVARCHAR(50),
    @NuevoCorreoElectronico NVARCHAR(100)
AS
BEGIN
    UPDATE Usuarios
    SET 
        Nombre = @NuevoNombre,
        Apellido = @NuevoApellido,
        CorreoElectronico = @NuevoCorreoElectronico
    WHERE UsuarioID = @UsuarioID;
END;
--------EJECUCIÓN----------------
EXEC ActualizarUsuario 
    @UsuarioID = 1,
    @NuevoNombre = 'Heydi',
    @NuevoApellido = 'Chaina',
    @NuevoCorreoElectronico = 'hc@gmail.com';

--ESTUDIANTE: Heydi Chaina Velasquez
-- Procedimiento almacenado para eliminar un usuario
CREATE PROCEDURE EliminarUsuario
    @UsuarioID INT
AS
BEGIN
    DELETE FROM Usuarios
    WHERE UsuarioID = @UsuarioID;
END;
--------EJECUCIÓN----------------
EXEC EliminarUsuario 
    @UsuarioID = 1;

--ESTUDIANTE: Heydi Chaina Velasquez
-- Procedimiento almacenado para cambiar el plan de suscripción de un usuario
CREATE PROCEDURE CambiarPlanSuscripcion
    @UsuarioID INT,
    @NuevoPlanID INT
AS
BEGIN
    UPDATE DetallesSuscripcion
    SET PlanID = @NuevoPlanID
    WHERE UsuarioID = @UsuarioID;
END;
--------EJECUCIÓN----------------
EXEC CambiarPlanSuscripcion 
    @UsuarioID = 1,
    @NuevoPlanID = 2;

--ESTUDIANTE: Heydi Chaina Velasquez
-- Procedimiento almacenado para obtener detalles de un usuario
CREATE PROCEDURE ObtenerDetallesUsuario
    @CorreoElectronico NVARCHAR(100)
AS
BEGIN
    SELECT * FROM Usuarios
    WHERE CorreoElectronico = @CorreoElectronico;
END;
--------EJECUCIÓN----------------
EXEC ObtenerDetallesUsuario 
    @CorreoElectronico = 'hc@gmail.com';

--ESTUDIANTE: Heydi Chaina Velasquez
-- Función para obtener la edad de un usuario
CREATE FUNCTION CalcularEdad
    (@FechaNacimiento DATE)
RETURNS INT
AS
BEGIN
    DECLARE @Edad INT;

    SET @Edad = DATEDIFF(YEAR, @FechaNacimiento, GETDATE());

    RETURN @Edad;
END;
--------EJECUCIÓN----------------
DECLARE @FechaNacimiento DATE = '1990-01-01';
DECLARE @EdadCalculada INT;
SET @EdadCalculada = dbo.CalcularEdad(@FechaNacimiento);
PRINT 'La edad calculada es: ' + CAST(@EdadCalculada AS NVARCHAR(10));

--ESTUDIANTE: Heydi Chaina Velasquez
-- Función para calcular el descuento en el precio de un plan de suscripción
CREATE FUNCTION CalcularDescuento
    (@PrecioMensual DECIMAL(10, 2), @DescuentoPorcentaje INT)
RETURNS DECIMAL(10, 2)
AS
BEGIN
    DECLARE @Descuento DECIMAL(10, 2);

    SET @Descuento = @PrecioMensual * (@DescuentoPorcentaje / 100.0);

    RETURN @Descuento;
END;
--------EJECUCIÓN----------------
DECLARE @PrecioMensual DECIMAL(10, 2) = 100.00;
DECLARE @DescuentoPorcentaje INT = 10;
DECLARE @DescuentoCalculado DECIMAL(10, 2);
SET @DescuentoCalculado = dbo.CalcularDescuento(@PrecioMensual, @DescuentoPorcentaje);
PRINT 'El descuento calculado es: ' + CAST(@DescuentoCalculado AS NVARCHAR(20));

--ESTUDIANTE: Heydi Chaina Velasquez
-- Función para validar si una contraseña cumple con ciertos criterios de fortaleza
CREATE FUNCTION ValidarContraseñaFuerte
    (@Contraseña NVARCHAR(50))
RETURNS BIT
AS
BEGIN
    DECLARE @EsFuerte BIT;

    SET @EsFuerte = CASE 
        WHEN LEN(@Contraseña) >= 8 AND
             PATINDEX('%[0-9]%', @Contraseña) > 0 AND
             PATINDEX('%[A-Z]%', @Contraseña) > 0 AND
             PATINDEX('%[a-z]%', @Contraseña) > 0
        THEN 1
        ELSE 0
    END;

    RETURN @EsFuerte;
END;
--------EJECUCIÓN----------------
DECLARE @Contraseña NVARCHAR(50) = 'Password123';
DECLARE @EsFuerte BIT;
SET @EsFuerte = dbo.ValidarContraseñaFuerte(@Contraseña);
PRINT 'La contraseña es fuerte: ' + CAST(@EsFuerte AS NVARCHAR(5));

--ESTUDIANTE: Heydi Chaina Velasquez
-- Vista para mostrar detalles de suscripciones
CREATE VIEW VistaDetallesSuscripciones
AS
SELECT
    U.Nombre + ' ' + U.Apellido AS NombreCompleto,
    PS.Descripcion AS PlanDescripcion,
    DS.FechaInicio,
    DS.FechaFin
FROM
    DetallesSuscripcion DS
    INNER JOIN Usuarios U ON DS.UsuarioID = U.UsuarioID
    INNER JOIN PlanesServicio PS ON DS.PlanID = PS.PlanID;
--------EJECUCIÓN----------------
SELECT * FROM VistaDetallesSuscripciones;

--ESTUDIANTE: Heydi Chaina Velasquez
-- Vista para mostrar usuarios con detalles de suscripción
CREATE VIEW VistaUsuariosConSuscripcion
AS
SELECT
    U.Nombre,
    U.Apellido,
    U.CorreoElectronico,
    PS.Descripcion AS PlanDescripcion,
    DS.FechaInicio,
    DS.FechaFin
FROM
    Usuarios U
    INNER JOIN DetallesSuscripcion DS ON U.UsuarioID = DS.UsuarioID
    INNER JOIN PlanesServicio PS ON DS.PlanID = PS.PlanID;
--------EJECUCIÓN----------------
SELECT * FROM VistaUsuariosConSuscripcion;

--ESTUDIANTE: Heydi Chaina Velasquez
-- Vista para mostrar usuarios sin suscripción
CREATE VIEW VistaUsuariosSinSuscripcion
AS
SELECT
    U.Nombre,
    U.Apellido,
    U.CorreoElectronico
FROM
    Usuarios U
WHERE
    NOT EXISTS (
        SELECT 1
        FROM DetallesSuscripcion DS
        WHERE DS.UsuarioID = U.UsuarioID
    );
--------EJECUCIÓN----------------
SELECT * FROM VistaUsuariosSinSuscripcion;

--ESTUDIANTE: Heydi Chaina Velasquez
-- Vista para mostrar detalles de planes de suscripción
CREATE VIEW VistaDetallesPlanes
AS
SELECT
    PlanID,
    Descripcion,
    PrecioMensual
FROM
    PlanesServicio;
--------EJECUCIÓN----------------
SELECT * FROM VistaDetallesPlanes;
